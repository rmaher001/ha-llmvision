alias: Security Check Local LLM - Latest
description: >-
  Analyzes camera feeds for security events when a person crosses a specific
  line.
triggers:
  - id: enter_patio
    event_type: dahua_event_received
    event_data:
      name: Front Full Camera
      Code: CrossLineDetection
      action: Start
      data:
        Name: Enter-Patio
        Object:
          ObjectType: Human
    trigger: event
    enabled: true
  - id: enter_door
    event_type: dahua_event_received
    event_data:
      name: Front Full Camera
      Code: CrossLineDetection
      action: Start
      data:
        Name: Enter-Door
        Object:
          ObjectType: Human
    trigger: event
    enabled: true
  - trigger: event
    event_type: dahua_event_received
    event_data:
      Code: CrossRegionDetection
      action: Start
      data:
        Action: Cross
        Name: Door-Area
        Direction: Enter
        Object:
          Action: Appear
          ObjectType: Human
      name: Front Full Camera
    id: enter_door_area
  - id: manual_run
    entity_id: input_button.run_scecurity_check
    trigger: state
conditions:
  - condition: or
    conditions:
      - condition: template
        value_template: "{{ trigger.id == 'enter_patio' }}"
      - condition: template
        value_template: "{{ trigger.id == 'manual_run' }}"
      - condition: and
        conditions:
          - condition: template
            value_template: "{{ trigger.id in ['enter_door', 'enter_door_area'] }}"
          - condition: template
            value_template: >
              {% set patio_time = states('input_datetime.last_enter_patio_time')
              %} {% if patio_time != 'unknown' and patio_time != 'unavailable'
              %}
                {% set patio_datetime = patio_time | as_datetime %}
                {% if patio_datetime %}
                  {{ (as_timestamp(now()) - as_timestamp(patio_datetime)) > 60 }}
                {% else %}
                  true
                {% endif %}
              {% else %}
                true
              {% endif %}
actions:
  - if:
      - condition: template
        value_template: "{{ trigger.id == 'enter_patio' }}"
    then:
      - action: input_datetime.set_datetime
        target:
          entity_id: input_datetime.last_enter_patio_time
        data:
          datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
  - variables:
      trigger_time_obj: "{{ now() }}"
      trigger_source: |
        {% if trigger.id in ['enter_patio', 'exit_door'] %}
          Event: {{ trigger.event.data.data.Name }}
        {% else %}
          Manual Run
        {% endif %}
      face_recognized_state: "{{ states('binary_sensor.entrance_face_recognition_sensor') }}"
      front_door_state: "{{ states('lock.front_door_lock') }}"
      garage_door_state: "{{ states('cover.group_garage_door_opener_door') }}"
  - data:
      remember: true
      use_memory: true
      duration: 5
      max_frames: 10
      include_filename: true
      target_width: 640
      generate_title: true
      expose_images: true
      image_entity:
        - camera.doorbell_clear
        - camera.front_full_camera_main
        - camera.front_side_camera_hd_stream
        - camera.patio_camera_hd_stream
        - camera.sidewalk_street_camera_main
        - camera.entrance_camera_clear
        - camera.garage_camera_hd_stream
        - camera.living_room_camera_2_clear
        - camera.living_room_camera_1_clear
      provider: 01K0Z9TVHR1F4MAKFQ534145YS
      max_tokens: 500
      message: >-
        Examine the time stamped snapshots from the security camera streams for
        any security events and generate a response suitable for a notification.
        IMPORTANT: You have access to labeled photos of known residents. When you
        recognize any known person in the frames, you MUST explicitly state their
        name(s) in your response. Do not refer to them generically as "person" or
        "individual" - use their actual names from the labeled photos.
        For unknown persons, describe them as "unidentified person" or "unknown visitor".
        Always include the specific names of any recognized known residents,
        description of any unidentified persons, what activity is occurring,
        and any security-relevant observations.
    response_variable: response
    action: llmvision_debug.stream_analyzer
  - data:
      title: "Security Check: {{ trigger_source }}"
      message: >
        {% if response and response.key_frame %}

        ![image](/local/{{ response.key_frame[12:] }})

        {% endif %}


        {{ response.response_text | default('LLM analysis did not provide a
        summary.') }}


        ---

        **Event Details:**

        - **Time:** {{ trigger_time_obj | as_timestamp |
        timestamp_custom('%Y-%m-%d %H:%M:%S.%f') }}

        - **Trigger:** {{ trigger_source }}

        - **Face Recognized:** {{ face_recognized_state }}

        - **Front Door:** {{ front_door_state }}

        - **Garage Door:** {{ garage_door_state }}


        [Video
        Context](https://home.ram6.com/api/scrypted/e71cc4f78d8e384e7433761a116a669d/endpoint/@scrypted/nvr/public/#/timeline/153?time={{
        ((trigger_time_obj | as_timestamp - 5) | int) * 1000
        }}&from=notification&serverId=f0411c1fd4b1cb38)
    action: persistent_notification.create
alias: Simple Package Detection
description: >-
  State-based package detection using structured output from multiple cameras.
  Detects package presence rather than activities.
triggers:
  - trigger: event
    event_type: dahua_event_received
    event_data:
      name: Front Full Camera
      Code: CrossLineDetection
      action: Start
      data:
        Name: Enter-Patio
        Direction: RightToLeft
        Object:
          Action: Appear
          ObjectType: Human
    id: person_approaching
  - trigger: event
    event_type: dahua_event_received
    event_data:
      name: Front Full Camera
      Code: CrossRegionDetection
      action: Start
      data:
        Direction: Leave
        Name: Door-Area
        Object:
          ObjectType: Human
    id: person_exiting_house
  - trigger: time_pattern
    hours: /1
    id: periodic_check
conditions:
  - condition: time
    after: "07:00:00"
    before: "22:00:00"
actions:
  - variables:
      check_time: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
      trigger_type: "{{ trigger.id }}"
  - action: llmvision.stream_analyzer
    data:
      remember: true
      use_memory: false
      max_frames: 6
      include_filename: true
      target_width: 1280
      max_tokens: 1000
      generate_title: false
      expose_images: false
      response_format: json
      provider: 01K4JMYCVPRJYJZ1Z37E79GQ57
      message: |2-
          Analyze these camera views for packages/deliveries and delivery personnel.
          Look for: 1) Boxes, envelopes, or delivery bags near the door or on the porch
          2) Delivery person in uniform (Amazon, UPS, FedEx, USPS, DHL) Identify carrier
          by uniform colors/logos if visible. Ignore residents, pets, plants, furniture,
          and decorations.
      image_entity:
        - camera.doorbell_clear
        - camera.front_side_camera_hd_stream_direct
        - camera.full_front_camera_main
      duration: 6
      min_frames_per_camera: 2
      structure: |2-
                {
                  "type": "object",
                  "properties": {
                    "package_present": {
                      "type": "boolean",
                      "description": "Is there a package/delivery visible?"
                    },
                    "confidence": {
                      "type": "number",
                      "minimum": 0,
                      "maximum": 1,
                      "description": "Confidence score"
                    },
                    "location": {
                      "type": "string",
                      "enum": ["door", "porch", "walkway", "none"],
                      "description": "Where is the package located?"
                    },
                    "package_count": {
                      "type": "integer",
                      "minimum": 0,
                      "description": "Number of packages visible"
                    },
                    "delivery_person": {
                      "type": "boolean",
                      "description": "Is a delivery person visible?"
                    },
                    "carrier": {
                      "type": "string",
                      "enum": ["Amazon", "UPS", "FedEx", "USPS", "DHL", "Unknown", "None"],
                      "description": "Delivery carrier if identifiable"
                    },
                    "description": {
                      "type": "string",
                      "description": "Brief description of what is visible"
                    }
                  },
                  "required": ["package_present", "confidence", "location", "package_count", "delivery_person", "carrier", "description"],
                  "additionalProperties": false
                }
    response_variable: detection_result
  - variables:
      package_detected: >-
        {{ detection_result.structured_response.package_present | default(false)
        }}
      confidence: "{{ detection_result.structured_response.confidence | default(0) }}"
      location: "{{ detection_result.structured_response.location | default('none') }}"
      package_count: "{{ detection_result.structured_response.package_count | default(0) }}"
      delivery_person: >-
        {{ detection_result.structured_response.delivery_person | default(false)
        }}
      carrier: "{{ detection_result.structured_response.carrier | default('None') }}"
      description: >-
        {{ detection_result.structured_response.description | default('No
        packages detected') }}
      current_state: "{{ states('input_boolean.package_at_door') }}"
  - action: persistent_notification.create
    data:
      title: Package Detection Check
      message: >
        **Time:** {{ check_time }}

        **Trigger:** {{ trigger_type }}

        **Package Detected:** {{ 'Yes' if package_detected else 'No' }}

        **Confidence:** {{ (confidence * 100) | round(0) }}%

        **Location:** {{ location }}

        **Count:** {{ package_count }}

        **Delivery Person:** {{ 'Yes' if delivery_person else 'No' }}

        **Carrier:** {{ carrier }}

        **Description:** {{ description }}

        **Current State:** {{ current_state }}

        **State Change:** {{ 'Yes' if (package_detected and current_state ==
        'off') or (not package_detected and current_state == 'on') else 'No' }}
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ package_detected and confidence >= 0.7 }}"
          - condition: state
            entity_id: input_boolean.package_at_door
            state: "off"
        sequence:
          - action: input_boolean.turn_on
            target:
              entity_id: input_boolean.package_at_door
          - action: notify.persistent_notification
            data:
              title: >-
                📦 Package Delivered{% if carrier != 'None' and carrier !=
                'Unknown' %} - {{ carrier }}{% endif %}
              message: |
                {{ package_count }} package(s) detected at {{ location }}
                {% if carrier != 'None' %}Carrier: {{ carrier }}{% endif %}
                {% if delivery_person %}Delivery person seen{% endif %}
                {{ description }}
                Time: {{ check_time }}
          - action: notify.mobile_app_pixel_10_pro_fold
            data:
              title: >-
                📦 {% if carrier != 'None' and carrier != 'Unknown' %}{{ carrier
                }} {% endif %}Package Delivered
              message: >-
                {{ package_count }} package(s) at {{ location }}{% if
                delivery_person %} - delivery person seen{% endif %}
              data:
                tag: package_delivery
                importance: high
          - action: media_player.volume_set
            data:
              volume_level: 0.35
            target:
              entity_id: media_player.home_group
          - action: tts.cloud_say
            data:
              cache: false
              message: |
                {% if carrier != 'None' and carrier != 'Unknown' %}
                  {{ carrier }} package delivered at {{ location }}. {{ package_count }} package{{ 's' if package_count > 1 else '' }} detected.
                {% else %}
                  Package delivered at {{ location }}. {{ package_count }} package{{ 's' if package_count > 1 else '' }} detected.
                {% endif %}
            target:
              entity_id: media_player.home_group
      - conditions:
          - condition: template
            value_template: "{{ not package_detected and confidence >= 0.7 }}"
          - condition: state
            entity_id: input_boolean.package_at_door
            state: "on"
        sequence:
          - action: input_boolean.turn_off
            target:
              entity_id: input_boolean.package_at_door
          - action: notify.persistent_notification
            data:
              title: 📦 Package Collected
              message: |
                Package has been picked up
                Time: {{ check_time }}
          - action: notify.mobile_app_pixel_10_pro_fold
            data:
              title: 📦 Package Collected
              message: Package has been picked up from {{ location }}
              data:
                tag: package_pickup
                importance: default
          - action: media_player.volume_set
            data:
              volume_level: 0.35
            target:
              entity_id: media_player.home_group
          - action: tts.cloud_say
            data:
              cache: false
              message: Package has been picked up from {{ location }}.
            target:
              entity_id: media_player.home_group
mode: single
max_exceeded: silent
trace:
  stored_traces: 100

